// --- VERSION CORRIGÉE DE sw.js ---

const CACHE_NAME = 'cartomancie-v3'; // Je change la version pour forcer une mise à jour du cache
const urlsToCache = [
  './', // Représente la racine du projet
  './index.html',
  './manifest.json',
  './icons/icon-192.png',
  './icons/icon-512.png'
  // Le service worker mettra en cache les images des cartes au fur et à mesure
];

// Étape d'installation : on met en cache les fichiers de base
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('Mise en cache des fichiers de base');
        return cache.addAll(urlsToCache);
      })
  );
});

// Étape de Fetch : on sert les fichiers
self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        // Si la ressource est dans le cache, on la renvoie
        if (response) {
          return response;
        }

        // Sinon, on la récupère sur le réseau, on la met en cache ET on la renvoie
        return fetch(event.request).then(
          function(response) {
            // On vérifie que la réponse est valide
            if(!response || response.status !== 200) {
              return response;
            }

            // On ne met en cache que les requêtes GET (pour éviter les erreurs)
            if(event.request.method !== 'GET') {
              return response;
            }

            const responseToCache = response.clone();

            caches.open(CACHE_NAME)
              .then(function(cache) {
                cache.put(event.request, responseToCache);
              });

            return response;
          }
        );
      })
    );
});

// Étape d'activation : on nettoie les anciens caches
self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cache => {
          if (cache !== CACHE_NAME) {
            return caches.delete(cache);
          }
        })
      );
    })
  );
});
